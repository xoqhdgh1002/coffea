{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coffea Processors\n",
    "This is a rendered copy of [processor.ipynb](https://github.com/CoffeaTeam/coffea/blob/master/binder/processor.ipynb). You can optionally run it interactively on [binder at this link](https://mybinder.org/v2/gh/coffeateam/coffea/master?filepath=binder%2Fprocessor.ipynb)\n",
    "\n",
    "Coffea relies mainly on [uproot](https://github.com/scikit-hep/uproot) to provide access to ROOT files for analysis.\n",
    "As a usual analysis will involve processing tens to thousands of files, totalling gigabytes to terabytes of data, there is a certain amount of work to be done to build a parallelized framework to process the data in a reasonable amount of time. Of course, one can work directly within uproot to achieve this, as we'll show in the beginning, but coffea provides the `coffea.processor` module, which allows users to worry just about the actual analysis code and not about how to implement efficient parallelization, assuming that the parallization is a trivial map-reduce operation (e.g. filling histograms and adding them together). The module provides the following key features:\n",
    "\n",
    " * A `ProcessorABC` abstract base class that can be derived from to implement the analysis code;\n",
    " * An interface to the arrays being read from the TTree, either [DataFrame](https://coffeateam.github.io/coffea/api/coffea.processor.LazyDataFrame.html#coffea.processor.LazyDataFrame) or [NanoEvents](https://coffeateam.github.io/coffea/notebooks/nanoevents.html), to be used as inputs;\n",
    " * A set of [accumulator types](https://coffeateam.github.io/coffea/api/coffea.processor.AccumulatorABC.html#coffea.processor.AccumulatorABC), such as `dict_accumulator` or `Hist` to be used as output; and\n",
    " * A set of parallel executors to access multicore processing or distributed computing systems such as [Dask](https://distributed.dask.org/en/latest/), [Parsl](http://parsl-project.org/), [Spark](https://spark.apache.org/), and others.\n",
    "\n",
    "Let's start by writing a simple processor class that reads some CMS open data and plots a dimuon mass spectrum.\n",
    "We'll start by copying the [ProcessorABC](https://coffeateam.github.io/coffea/api/coffea.processor.ProcessorABC.html#coffea.processor.ProcessorABC) skeleton and filling in some details:\n",
    "\n",
    " * Remove `flag`, as we won't use it\n",
    " * Adding a new histogram for $m_{\\mu \\mu}$\n",
    " * Building a [Candidate](https://coffeateam.github.io/coffea/api/coffea.nanoevents.methods.candidate.PtEtaPhiMCandidate.html#coffea.nanoevents.methods.candidate.PtEtaPhiMCandidate) record for muons\n",
    " * Calculating the dimuon invariant mass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import awkward1 as ak\n",
    "from coffea import hist, processor\n",
    "\n",
    "# register our candidate behaviors\n",
    "from coffea.nanoevents.methods import candidate\n",
    "ak.behavior.update(candidate.behavior)\n",
    "\n",
    "class MyProcessor(processor.ProcessorABC):\n",
    "    def __init__(self):\n",
    "        self._accumulator = processor.dict_accumulator({\n",
    "            \"sumw\": processor.defaultdict_accumulator(float),\n",
    "            \"mass\": hist.Hist(\n",
    "                \"Events\",\n",
    "                hist.Cat(\"dataset\", \"Dataset\"),\n",
    "                hist.Bin(\"mass\", \"$m_{\\mu\\mu}$ [GeV]\", 60, 60, 120),\n",
    "            ),\n",
    "        })\n",
    "\n",
    "    @property\n",
    "    def accumulator(self):\n",
    "        return self._accumulator\n",
    "\n",
    "    def process(self, events):\n",
    "        output = self.accumulator.identity()\n",
    "\n",
    "        dataset = events.metadata['dataset']\n",
    "        muons = ak.zip({\n",
    "            \"pt\": events.Muon_pt,\n",
    "            \"eta\": events.Muon_eta,\n",
    "            \"phi\": events.Muon_phi,\n",
    "            \"mass\": events.Muon_mass,\n",
    "            \"charge\": events.Muon_charge,\n",
    "        }, with_name=\"PtEtaPhiMCandidate\")\n",
    "\n",
    "        cut = (ak.num(muons) == 2) & (ak.sum(muons.charge) == 0)\n",
    "        # add first and second muon in every event together\n",
    "        dimuon = muons[cut][:, 0] + muons[cut][:, 1]\n",
    "        \n",
    "        output[\"sumw\"][dataset] += len(events)\n",
    "        output[\"mass\"].fill(\n",
    "            dataset=dataset,\n",
    "            mass=dimuon.mass,\n",
    "        )\n",
    "\n",
    "        return output\n",
    "\n",
    "    def postprocess(self, accumulator):\n",
    "        return accumulator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we were to just use bare uproot to execute this processor, we could do that with the following example, which:\n",
    "\n",
    " * Opens a CMS open data file\n",
    " * Creates a NanoEvents object using `BaseSchema` (roughly equivalent to the output of `uproot.lazy`)\n",
    " * Creates a `MyProcessor` instance\n",
    " * Runs the `process()` function, which returns our accumulators\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sumw': defaultdict_accumulator(float, {'DoubleMuon': 10000.0}),\n",
       " 'mass': <Hist (dataset,mass) instance at 0x7f4c327cb4a8>}"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import uproot4\n",
    "from coffea.nanoevents import NanoEventsFactory, BaseSchema\n",
    "\n",
    "# https://github.com/scikit-hep/uproot4/issues/122\n",
    "uproot4.open.defaults[\"xrootd_handler\"] = uproot4.source.xrootd.MultithreadedXRootDSource\n",
    "\n",
    "filename = \"root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012B_DoubleMuParked.root\"\n",
    "file = uproot4.open(filename)\n",
    "events = NanoEventsFactory.from_file(\n",
    "    file,\n",
    "    entry_stop=10000,\n",
    "    metadata={\"dataset\": \"DoubleMuon\"},\n",
    "    schemaclass=BaseSchema,\n",
    ").events()\n",
    "p = MyProcessor()\n",
    "out = p.process(events)\n",
    "out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One could expand on this code to run over several chunks of the file, setting `entry_start` and `entry_stop` as appropriate. Then, several datasets could be processed by iterating over several files. However, [run_uproot_job](https://coffeateam.github.io/coffea/api/coffea.processor.run_uproot_job.html#coffea.processor.run_uproot_job) can help with this. One lists the datasets and corresponding files, the processor they want to run, and which executor they want to use. Available executors are listed [here](https://coffeateam.github.io/coffea/modules/coffea.processor.html#functions). Since these files are very large, we limit to just reading the first few chunks of events from each dataset with `maxchunks`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f561130dfb4f4e3e9d917c87fc06bbf4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Processing', max=8, style=ProgressStyle(description_width='inâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'sumw': defaultdict_accumulator(float,\n",
       "                         {'ZZ to 4mu': 399752.0, 'DoubleMuon': 400224.0}),\n",
       " 'mass': <Hist (dataset,mass) instance at 0x7f4c31f05898>}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fileset = {\n",
    "    'DoubleMuon': [\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012B_DoubleMuParked.root',\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012C_DoubleMuParked.root',\n",
    "    ],\n",
    "    'ZZ to 4mu': [\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/ZZTo4mu.root'\n",
    "    ]\n",
    "}\n",
    "\n",
    "out = processor.run_uproot_job(\n",
    "    fileset,\n",
    "    treename=\"Events\",\n",
    "    processor_instance=MyProcessor(),\n",
    "    executor=processor.iterative_executor,\n",
    "    executor_args={\n",
    "        \"schema\": BaseSchema,\n",
    "    },\n",
    "    maxchunks=4,\n",
    ")\n",
    "out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, if we want to use more than a single core on our machine, we simply change [iterative_executor](https://coffeateam.github.io/coffea/api/coffea.processor.iterative_executor.html) for [futures_executor](https://coffeateam.github.io/coffea/api/coffea.processor.futures_executor.html), which uses the python [concurrent.futures](https://docs.python.org/3/library/concurrent.futures.html) standard library. Optional arguments to these executors can be provided via `executor_args` parameter of `run_uproot_job`, such as the number of cores to use (2):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a935427b25ab48e4a2ac8a4b89aae7d0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Processing', max=8, style=ProgressStyle(description_width='inâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'sumw': defaultdict_accumulator(float,\n",
       "                         {'ZZ to 4mu': 399752.0, 'DoubleMuon': 400224.0}),\n",
       " 'mass': <Hist (dataset,mass) instance at 0x7f4c3042cbe0>}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out = processor.run_uproot_job(\n",
    "    fileset,\n",
    "    treename=\"Events\",\n",
    "    processor_instance=MyProcessor(),\n",
    "    executor=processor.futures_executor,\n",
    "    executor_args={\"schema\": BaseSchema, \"workers\": 2},\n",
    "    maxchunks=4,\n",
    ")\n",
    "out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hopefully this ran faster than the previous cell, but that may depend on how many cores are available on the machine you are running this notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting fancy\n",
    "Let's flesh out this analysis into a 4-muon analysis, searching for diboson events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from functools import partial\n",
    "import numba\n",
    "\n",
    "\n",
    "@numba.njit\n",
    "def find_4lep(events_leptons, builder):\n",
    "    \"\"\"Search for valid 4-lepton combinations from an array of events * leptons {charge, ...}\n",
    "    \n",
    "    A valid candidate has two pairs of leptons that each have balanced charge\n",
    "    Outputs an array of events * candidates {indices 0..3} corresponding to all valid\n",
    "    permutations of all valid combinations of unique leptons in each event\n",
    "    (omitting permutations of the pairs)\n",
    "    \"\"\"\n",
    "    for leptons in events_leptons:\n",
    "        builder.begin_list()\n",
    "        nlep = len(leptons)\n",
    "        for i0 in range(nlep):\n",
    "            for i1 in range(i0 + 1, nlep):\n",
    "                if leptons[i0].charge + leptons[i1].charge != 0:\n",
    "                    continue\n",
    "                for i2 in range(nlep):\n",
    "                    for i3 in range(i2 + 1, nlep):\n",
    "                        if len({i0, i1, i2, i3}) < 4:\n",
    "                            continue\n",
    "                        if leptons[i2].charge + leptons[i3].charge != 0:\n",
    "                            continue\n",
    "                        builder.begin_tuple(4)\n",
    "                        builder.index(0).integer(i0)\n",
    "                        builder.index(1).integer(i1)\n",
    "                        builder.index(2).integer(i2)\n",
    "                        builder.index(3).integer(i3)\n",
    "                        builder.end_tuple()\n",
    "        builder.end_list()\n",
    "\n",
    "    return builder\n",
    "\n",
    "\n",
    "class FancyDimuonProcessor(processor.ProcessorABC):\n",
    "    def __init__(self):\n",
    "        dataset_axis = hist.Cat(\"dataset\", \"Primary dataset\")\n",
    "        mass_axis = hist.Bin(\"mass\", r\"$m_{\\mu\\mu}$ [GeV]\", 300, 0, 300)\n",
    "        pt_axis = hist.Bin(\"pt\", r\"$p_{T,\\mu}$ [GeV]\", 300, 0, 300)\n",
    "        \n",
    "        self._accumulator = processor.dict_accumulator({\n",
    "            'nMuons': hist.Hist(\n",
    "                \"Counts\",\n",
    "                dataset_axis,\n",
    "                hist.Bin(\"nMuons\", \"Number of good muons\", 6, 0, 6),\n",
    "            ),\n",
    "            'mass': hist.Hist(\"Counts\", dataset_axis, mass_axis),\n",
    "            'mass_z1': hist.Hist(\"Counts\", dataset_axis, mass_axis),\n",
    "            'mass_z2': hist.Hist(\"Counts\", dataset_axis, mass_axis),\n",
    "            'pt_z1_mu1': hist.Hist(\"Counts\", dataset_axis, pt_axis),\n",
    "            'pt_z1_mu2': hist.Hist(\"Counts\", dataset_axis, pt_axis),\n",
    "            'cutflow': processor.defaultdict_accumulator(\n",
    "                # we don't use a lambda function to avoid pickle issues\n",
    "                partial(processor.defaultdict_accumulator, int)\n",
    "            ),\n",
    "        })\n",
    "    \n",
    "    @property\n",
    "    def accumulator(self):\n",
    "        return self._accumulator\n",
    "    \n",
    "    def process(self, events):\n",
    "        output = self.accumulator.identity()\n",
    "\n",
    "        dataset = events.metadata['dataset']\n",
    "        muons = ak.zip({\n",
    "            \"pt\": events.Muon_pt,\n",
    "            \"eta\": events.Muon_eta,\n",
    "            \"phi\": events.Muon_phi,\n",
    "            \"mass\": events.Muon_mass,\n",
    "            \"charge\": events.Muon_charge,\n",
    "            \"softId\": events.Muon_softId,\n",
    "            \"isolation\": events.Muon_pfRelIso03_all,\n",
    "        }, with_name=\"PtEtaPhiMCandidate\")\n",
    "        \n",
    "        # make sure they are sorted by transverse momentum\n",
    "        muons = muons[ak.argsort(muons.pt, axis=1)]\n",
    "        \n",
    "        output['cutflow'][dataset]['all events'] += len(muons)\n",
    "        \n",
    "        # impose some quality and minimum pt cuts on the muons\n",
    "        muons = muons[\n",
    "            muons.softId\n",
    "            & (muons.pt > 5)\n",
    "            & (muons.isolation < 0.2)\n",
    "        ]\n",
    "        output['cutflow'][dataset]['at least 4 good muons'] += ak.sum(ak.num(muons) >= 4)\n",
    "        output['nMuons'].fill(dataset=dataset, nMuons=ak.num(muons))\n",
    "        \n",
    "        # reduce first axis: skip events without enough muons\n",
    "        muons = muons[ak.num(muons) >= 4]\n",
    "        \n",
    "        # find all candidates with helper function\n",
    "        fourmuon = find_4lep(muons, ak.ArrayBuilder()).snapshot()\n",
    "        if ak.all(ak.num(fourmuon) == 0):\n",
    "            # skip processing as it is an EmptyArray\n",
    "            return output\n",
    "        fourmuon = [muons[fourmuon[idx]] for idx in \"0123\"]\n",
    "        fourmuon = ak.zip({\n",
    "            \"z1\": ak.zip({\n",
    "                \"lep1\": fourmuon[0],\n",
    "                \"lep2\": fourmuon[1],\n",
    "                \"p4\": fourmuon[0] + fourmuon[1],\n",
    "            }),\n",
    "            \"z2\": ak.zip({\n",
    "                \"lep1\": fourmuon[2],\n",
    "                \"lep2\": fourmuon[3],\n",
    "                \"p4\": fourmuon[2] + fourmuon[3],\n",
    "            }),\n",
    "        })\n",
    "        \n",
    "        output['cutflow'][dataset]['at least one candidate'] += ak.sum(ak.num(fourmuon) > 0)\n",
    "         \n",
    "        # require minimum dimuon mass\n",
    "        fourmuon = fourmuon[(fourmuon.z1.p4.mass > 60.) & (fourmuon.z2.p4.mass > 20.)]\n",
    "        output['cutflow'][dataset]['minimum dimuon mass'] += ak.sum(ak.num(fourmuon) > 0)\n",
    "        \n",
    "        # choose permutation with z1 mass closest to nominal Z boson mass\n",
    "        bestz1 = ak.singletons(ak.argmin(abs(fourmuon.z1.p4.mass - 91.1876), axis=1))\n",
    "        fourmuon = ak.flatten(fourmuon[bestz1])\n",
    "        \n",
    "        output['mass'].fill(\n",
    "            dataset=dataset,\n",
    "            mass=(fourmuon.z1.p4 + fourmuon.z2.p4).mass,\n",
    "        )\n",
    "        output['mass_z1'].fill(\n",
    "            dataset=dataset, \n",
    "            mass=fourmuon.z1.p4.mass,\n",
    "        )\n",
    "        output['mass_z2'].fill(\n",
    "            dataset=dataset, \n",
    "            mass=fourmuon.z2.p4.mass,\n",
    "        )\n",
    "        output['pt_z1_mu1'].fill(\n",
    "            dataset=dataset,\n",
    "            pt=fourmuon.z1.lep1.pt,\n",
    "        )\n",
    "        output['pt_z1_mu2'].fill(\n",
    "            dataset=dataset,\n",
    "            pt=fourmuon.z1.lep2.pt,\n",
    "        )\n",
    "        return output\n",
    "\n",
    "    def postprocess(self, accumulator):\n",
    "        return accumulator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "930da6d27087462f861fa86e0b0fcf8b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Preprocessing', max=1, style=ProgressStyle(description_width=â€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "edfe80225e3d41f59ecbdaec00fa2d6f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Processing', max=676, style=ProgressStyle(description_width='â€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "{'nMuons': <Hist (dataset,nMuons) instance at 0x7f4c303c9e10>, 'mass': <Hist (dataset,mass) instance at 0x7f4c80616dd8>, 'mass_z1': <Hist (dataset,mass) instance at 0x7f4c806168d0>, 'mass_z2': <Hist (dataset,mass) instance at 0x7f4c80616eb8>, 'pt_z1_mu1': <Hist (dataset,pt) instance at 0x7f4c806d4630>, 'pt_z1_mu2': <Hist (dataset,pt) instance at 0x7f4c3047b898>, 'cutflow': defaultdict_accumulator(..., {'ZZ to 4mu': defaultdict_accumulator(<class 'int'>, {'all events': 1499064, 'at least 4 good muons': 143618, 'at least one candidate': 143055, 'minimum dimuon mass': 81867}), 'DoubleMuon': defaultdict_accumulator(<class 'int'>, {'all events': 66128870, 'at least 4 good muons': 8289, 'at least one candidate': 3849, 'minimum dimuon mass': 485})})}\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "tstart = time.time()    \n",
    "\n",
    "fileset = {\n",
    "    'DoubleMuon': [\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012B_DoubleMuParked.root',\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012C_DoubleMuParked.root',\n",
    "    ],\n",
    "    'ZZ to 4mu': [\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/ZZTo4mu.root'\n",
    "    ]\n",
    "}\n",
    "\n",
    "output = processor.run_uproot_job(\n",
    "    fileset,\n",
    "    treename='Events',\n",
    "    processor_instance=FancyDimuonProcessor(),\n",
    "    executor=processor.futures_executor,\n",
    "    executor_args={\"schema\": BaseSchema, \"workers\": 4},\n",
    "    chunksize=100000,\n",
    "    maxchunks=None,\n",
    ")\n",
    "\n",
    "elapsed = time.time() - tstart\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Events/s: 119584.44833565521\n"
     ]
    }
   ],
   "source": [
    "nevt = output['cutflow']['ZZ to 4mu']['all events'] + output['cutflow']['DoubleMuon']['all events']\n",
    "print(\"Events/s:\", nevt / elapsed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What follows is just us looking at the output, you can execute it if you wish"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scale ZZ simulation to expected yield\n",
    "lumi = 11.6  # 1/fb\n",
    "zzxs = 7200 * 0.0336**2  # approximate 8 TeV ZZ(4mu)\n",
    "nzz = output['cutflow']['ZZ to 4mu']['all events']\n",
    "\n",
    "scaled = {}\n",
    "for name, h in output.items():\n",
    "    if isinstance(h, hist.Hist):\n",
    "        scaled[name] = h.copy()\n",
    "        scaled[name].scale({\"ZZ to 4mu\": lumi * zzxs / nzz}, \"dataset\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "ax = hist.plot1d(scaled['nMuons'], overlay='dataset')\n",
    "ax.set_ylim(1, None)\n",
    "ax.set_yscale('log')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = hist.plot1d(scaled['mass'].rebin(\"mass\", 4), overlay='dataset')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = hist.plot1d(scaled['mass_z1'], overlay='dataset')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 300)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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In3fP/7jP3LzzTczefJkWltb0/Y9+OCDOeqoo5gxY0bS5RdccAGjR4+mqqqKa665hilTpgCw//77861vfYuqqiq++tWvcuyxx8bWmT59OrNmzaK6upp+/fol7dfa2soVV1xBVVUVxxxzDDfeeCP7778/t956K3v27GH8+PGMGzeOW2+9FYBTTjmFurq6XvFjuwVZri+oqanxYrwfSXDq7+KrTyhwJCL58cYbb3DUUUcVOoyMNDU1UVVVxerVqxk0aFChw8mpZN+Dmb3qWV5moSvbRUSinn32WY488kiuv/76PpdE8klFG0VEok4//fRed0ZUMdAeiYiIZEWJREREsqJEIiIiWVEiEZFeScVMi4cSiYjsFYIS9WPHjuXoo4/mRz/6EW1tbd0eb7/99kvanklZ+enTp9O/f/92FxR++9vfxszYsmVLt2MqFCUSEdkrBOVX1q1bxzPPPMPSpUu5/fbbCxbPF77whVil4ba2Nl544YXY1ffFRolERPY6Q4cOZd68edx77724O83NzcyYMSN2VXlQ9mT+/PnMnj07tt65557LsmXLYu+/+93vMmHCBE477TSSFY199dVXmTJlChMnTuSss86ivr4+tuzSSy+NXZG+bNkyJk+eHCvUuH79esaNGxfre9dddzFnzhwgch+S448/nvHjx3PBBRfwySefAHDyySfzve99j+OOO46/+Zu/4cUXX8zNh5UBXUciIj3q9n9fR92HjR3a6+rbtzXtjhRcrJrzdLv2McMGdlh3zCED+eevdKyLlc7hhx9OW1sbDQ0N/PrXvwZgzZo1vPnmm5x55pm8/fbbadfftWsXEyZM4O677+aOO+7g9ttv5957740t37NnD9dffz1LlixhyJAhLF68mFtuuSVWCHL06NEsWbKETz75hEWLFnHFFVfw1FNPdRr317/+de655x6mTJnCbbfdxu233x6rDRYOh3n55Zdje1vPPvtslz6T7lIiEZG9VlAi6qWXXuL6668H4Mgjj+Swww7rNJGUlJRwySWXAHDFFVdw4YUXtlv+1ltvsXbtWs444wwgUktr2LBh7fpceOGFPPLII6xcuZL777+/03i3b9/Otm3bYvW9rrrqKi666KJ24wFMnDgxVkK/JyiRiEiPynTPId816N59911CoRBDhw4lVc3B0tLSdj/IJysLH0gsLe/ujB07lhUrUp95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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = hist.plot1d(scaled['mass_z2'], overlay='dataset')\n",
    "ax.set_xlim(2, 300)\n",
    "# ax.set_xscale('log')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = hist.plot1d(scaled['pt_z1_mu1'], overlay='dataset')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = hist.plot1d(scaled['pt_z1_mu2'], overlay='dataset')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
